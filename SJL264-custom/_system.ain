;-----------------------------------------------------------------------------
;---	System constants:
;-----------------------------------------------------------------------------
;---	Zero page definitions:
z_txttab		=	$2b		;W BASIC program start address
z_status		=	$90		;B STatus
z_verfck		=	$93		;B VERIFY flag
z_bsour			=	$95		;B Serial data
z_msgfgl		=	$9a		;B Flag: Command / program mode
z_eal			=	$9d		;W LOAD memory pointer
z_eah			=	z_eal + 1
z_fnlen			=	$ab		;B FileName Length
z_sa			=	$ad		;B Secondary Address
z_fa			=	$ae		;B Device No
z_fnadr			=	$af		;W $AF/$B0: Serial: act. FileName address
z_memuss_l		=	$b4		;W Load address, if not from file
z_memuss_h		=	z_memuss_l + 1
z_sfdx			=	$c6		;B Last kb index


;---	SoftVectors:
v_iload			=	$032e		;W LOAD vector

b_memstr		=	$0531		;W BASIC FREE (!) memory START address
b_memsiz		=	$0533		;W BASIC FREE (!) memory END address


;---	BASIC addresses:
bas_cold_reset		=	$8000		;BASIC Interpreter Cold Reset			$8019
bas_warm_reset		=	$8003		;BASIC Interpreter Warm Reset			$800a
bas_coldreset_stack	=	$8025		;BASIC Interpreter Cold Reset end sequence
bas_reset		=	$802e		;BASIC Interpreter Init
bas_printheader		=	$80c2		;BASIC Print BASIC HEAD text
bas_printfree		=	$80e5		;BASIC Print "xxxx BYTES FREE" text
bas_vectors_init	=	$8117		;BASIC vectors init
bas_memory_check	=	$8923		;BASIC check available memory. If no room, out of memory error

;---	ROM misc. addresses:
rom_cbmser_devnotpres	=	$e1e9		;CBMSER set "Device Not Present" flag
rom_cbmser_timeout	=	$e1ee		;CBMSER set "TimeOut" flag + ATN hi (transfer end)
rom_cbmser_sstatserend	=	$e1f0		;CBMSER set status + ATN hi (transfer end)
rom_cbmser_atn_hiz	=	$e1fc		;CBMSER ATN line switch to HiZ
rom_cbmser_clk_hiz	=	$e2b8		;CBMSER CLK line switch to HiZ
rom_cbmser_clk_lo	=	$e2bf		;CBMSER CLK line switch to Lo
rom_cbmser_dat_hiz	=	$e2c6		;CBMSER DAT line switch to HiZ
rom_cbmser_dat_lo	=	$e2cd		;CBMSER DAT line switch to Lo
rom_cbmser_readlines	=	$e2d4		;CBMSER Read Clock/Data lines
rom_cbmser_wait1ms	=	$e2dc		;CBMSER wait ~1 mSec
rom_cbmser_wait20ms	=	$e2fc		;CBMSER Wait ~20 mSec

rom_iec_open		=	$f005		;KERNAL IEC/TCBM OPEN (BUSOP). If DNP, drop return address from stack and go to error handler routine
rom_orig_load_vect	=	$f04a		;KERNAL LOAD vector jump here
rom_load_cont		=	$f050		;Load routine cont.
rom_load_driveload	=	$f070		;Load routine cont. "B"
rom_load_readyret	=	$f0eb		;Load routine end: return end address
rom_searchingfor	=	$f160		;Print "SEARCHING FOR <NAME>"
rom_loadingverifying	=	$f189		;Print "LOADING"/"VERIFYING"
rom_iec_close		=	$f211		;KERNAL IEC/TCBM CLOSE
rom_error_filenotfnd	=	$f27c		;"?FILE NOT FOUND ERROR."
rom_set_status		=	$f41e		;ORA ST, STA ST

;---	ROM vectors:
rom_key			=	$ff49		;KERNAK KEY: Set string to Function Key
rom_primm		=	$ff4f		;KERNAL PRIMM
rom_vectors_setdefault	=	$ff8a		;KERNAL Vectors set to default values	$f2ce
rom_seclisten		=	$ff93		;KERNAL SECONDARY LISTEN		$ee4d
rom_sectalk		=	$ff96		;KERNAL SECONDARY TALK (TKSA)		$ee1a
rom_busin		=	$ffa5		;KERNAL BUSIN 				$ec8b
rom_busout		=	$ffa8		;KERNAL BUSOUT				$ecdf
rom_untalk		=	$ffab		;KERNAL UNTALK				$ef3b
rom_unlisten		=	$ffae		;KERNAL UNLISTEN			$ef23
rom_listen		=	$ffb1		;KERNAL LISTEN				$ee2c
rom_talk		=	$ffb4		;KERNAL TALK				$edfa
rom_setlfs		=	$ffba		;KERNAL SETLFS				$f413
rom_setnam		=	$ffbd		;KERNAL SETNAM				$f40c
rom_chrout		=	$ffd2		;KERNAL CHROUT				$ec4b
rom_load		=	$ffd5		;KERNAL LOAD				$f043
rom_save		=	$ffd8		;KERNAL SAVE				$f194

;-----------------------------------------------------------------------------
;---	HW registers:
hw_tedbase		=	$ff00		;$FF00..$FF3F: TED base address
hw_ted_scrcontrol1	=	hw_tedbase+$06	;$FF06: TED screen control register 1
hw_ted_chargenclk	=	hw_tedbase+$13	;$FF13: TED char.gen address + clock control
hw_ted_bordercolor	=	hw_tedbase+$19	;$FF19: TED border color
hw_ted_ypos		=	hw_tedbase+$1d	;$FF1D: TED actual rasterline no
;-----------------------------------------------------------------------------
