 AS V1.42 Beta [Bld 149] - Source File sjl264.asm - Page 1 - 22.09.2019 15:55:32


       1/       0 :                     ;-----------------------------------------------------------------------------
       2/       0 :                     ;---	SJL264 by BSZ
       3/       0 :                     ;---	C16, C116, plus/4 FastLoader for JiffyDOS equipped devices
       4/       0 :                     ;---	Based on C64's SJLOAD software:
       5/       0 :                     ;---		https://www.c64-wiki.com/wiki/SJLOAD
       6/       0 :                     ;---	Thanks to the original authors!
       7/       0 :                     ;---		2017.08.15.	Start!
       8/       0 :                     ;---		2017.09.04.	First load check
       9/       0 :                     ;---		2017.09.10.	First load check on real HW, it's work! :)
      10/       0 :                     ;---		2017.09.11.	Create useable program; support $0A00..$FAEF (..$FCFF) area for load
      11/       0 :                     ;---		2017.11.01.	Modify "Working Indicator", Add On/Off switch
      12/       0 :                     ;---		2017.11.05.	RC1
      13/       0 :                     ;---		2017.11.19.	Release 0.2
      14/       0 :                     ;---		2018.01.07.	Release 0.3, 16K/32K support, DIRECTORY, $0A00..$FAFF, ...
      15/       0 :                     ;-----------------------------------------------------------------------------
      16/       0 :                     	cpu	6502
      17/       0 :                     	page	0,0
      18/       0 :                     ;-----------------------------------------------------------------------------
      19/       0 : =0.3                def_version	=	"0.3"
      20/       0 :                     
      21/       0 : =N                  def_testing	=	"N"		;If "Y", built test mode
      22/       0 : =                   def_betatext	=	""		;If not empty string, build beta/rc release (only display _this_ text)
      23/       0 : =$3                 def_wimode	=	3		;0,1,2,3 Working indicator mode (0: none, 1, 2, 3: Border color changes)
      24/       0 : =Y                  def_onoffswitch	=	"Y"		;If "Y", enable On/Off switch
      25/       0 :                     
      26/       0 :                     	INCLUDE "_system.ain"		;System Constants
(1)    1/       0 :                     ;-----------------------------------------------------------------------------
(1)    2/       0 :                     ;---	System constants:
(1)    3/       0 :                     ;-----------------------------------------------------------------------------
(1)    4/       0 :                     ;---	Zero page definitions:
(1)    5/       0 : =$2B                z_txttab		=	$2b		;W BASIC program start address
(1)    6/       0 : =$90                z_status		=	$90		;B STatus
(1)    7/       0 : =$93                z_verfck		=	$93		;B VERIFY flag
(1)    8/       0 : =$95                z_bsour			=	$95		;B Serial data
(1)    9/       0 : =$9A                z_msgfgl		=	$9a		;B Flag: Command / program mode
(1)   10/       0 : =$9D                z_eal			=	$9d		;W LOAD memory pointer
(1)   11/       0 : =$9E                z_eah			=	z_eal + 1
(1)   12/       0 : =$AB                z_fnlen			=	$ab		;B FileName Length
(1)   13/       0 : =$AD                z_sa			=	$ad		;B Secondary Address
(1)   14/       0 : =$AE                z_fa			=	$ae		;B Device No
(1)   15/       0 : =$AF                z_fnadr			=	$af		;W $AF/$B0: Serial: act. FileName address
(1)   16/       0 : =$B4                z_memuss_l		=	$b4		;W Load address, if not from file
(1)   17/       0 : =$B5                z_memuss_h		=	z_memuss_l + 1
(1)   18/       0 : =$C6                z_sfdx			=	$c6		;B Last kb index
(1)   19/       0 :                     
(1)   20/       0 :                     
(1)   21/       0 :                     ;---	SoftVectors:
(1)   22/       0 : =$32E               v_iload			=	$032e		;W LOAD vector
(1)   23/       0 :                     
(1)   24/       0 : =$531               b_memstr		=	$0531		;W BASIC FREE (!) memory START address
(1)   25/       0 : =$533               b_memsiz		=	$0533		;W BASIC FREE (!) memory END address
(1)   26/       0 :                     
(1)   27/       0 :                     
(1)   28/       0 :                     ;---	BASIC addresses:
(1)   29/       0 : =$8000              bas_cold_reset		=	$8000		;BASIC Interpreter Cold Reset			$8019
(1)   30/       0 : =$8003              bas_warm_reset		=	$8003		;BASIC Interpreter Warm Reset			$800a
(1)   31/       0 : =$8025              bas_coldreset_stack	=	$8025		;BASIC Interpreter Cold Reset end sequence
(1)   32/       0 : =$802E              bas_reset		=	$802e		;BASIC Interpreter Init
(1)   33/       0 : =$80C2              bas_printheader		=	$80c2		;BASIC Print BASIC HEAD text
(1)   34/       0 : =$80E5              bas_printfree		=	$80e5		;BASIC Print "xxxx BYTES FREE" text
(1)   35/       0 : =$8117              bas_vectors_init	=	$8117		;BASIC vectors init
(1)   36/       0 : =$8923              bas_memory_check	=	$8923		;BASIC check available memory. If no room, out of memory error
(1)   37/       0 :                     
(1)   38/       0 :                     ;---	ROM misc. addresses:
(1)   39/       0 : =$E1E9              rom_cbmser_devnotpres	=	$e1e9		;CBMSER set "Device Not Present" flag
(1)   40/       0 : =$E1EE              rom_cbmser_timeout	=	$e1ee		;CBMSER set "TimeOut" flag + ATN hi (transfer end)
(1)   41/       0 : =$E1F0              rom_cbmser_sstatserend	=	$e1f0		;CBMSER set status + ATN hi (transfer end)
(1)   42/       0 : =$E1FC              rom_cbmser_atn_hiz	=	$e1fc		;CBMSER ATN line switch to HiZ
(1)   43/       0 : =$E2B8              rom_cbmser_clk_hiz	=	$e2b8		;CBMSER CLK line switch to HiZ
(1)   44/       0 : =$E2BF              rom_cbmser_clk_lo	=	$e2bf		;CBMSER CLK line switch to Lo
(1)   45/       0 : =$E2C6              rom_cbmser_dat_hiz	=	$e2c6		;CBMSER DAT line switch to HiZ
(1)   46/       0 : =$E2CD              rom_cbmser_dat_lo	=	$e2cd		;CBMSER DAT line switch to Lo
(1)   47/       0 : =$E2D4              rom_cbmser_readlines	=	$e2d4		;CBMSER Read Clock/Data lines
(1)   48/       0 : =$E2DC              rom_cbmser_wait1ms	=	$e2dc		;CBMSER wait ~1 mSec
(1)   49/       0 : =$E2FC              rom_cbmser_wait20ms	=	$e2fc		;CBMSER Wait ~20 mSec
(1)   50/       0 :                     
(1)   51/       0 : =$F005              rom_iec_open		=	$f005		;KERNAL IEC/TCBM OPEN (BUSOP). If DNP, drop return address from stack and go to error handler routine
(1)   52/       0 : =$F04A              rom_orig_load_vect	=	$f04a		;KERNAL LOAD vector jump here
(1)   53/       0 : =$F050              rom_load_cont		=	$f050		;Load routine cont.
(1)   54/       0 : =$F070              rom_load_driveload	=	$f070		;Load routine cont. "B"
(1)   55/       0 : =$F0EB              rom_load_readyret	=	$f0eb		;Load routine end: return end address
(1)   56/       0 : =$F160              rom_searchingfor	=	$f160		;Print "SEARCHING FOR <NAME>"
(1)   57/       0 : =$F189              rom_loadingverifying	=	$f189		;Print "LOADING"/"VERIFYING"
(1)   58/       0 : =$F211              rom_iec_close		=	$f211		;KERNAL IEC/TCBM CLOSE
(1)   59/       0 : =$F27C              rom_error_filenotfnd	=	$f27c		;"?FILE NOT FOUND ERROR."
(1)   60/       0 : =$F41E              rom_set_status		=	$f41e		;ORA ST, STA ST
(1)   61/       0 :                     
(1)   62/       0 :                     ;---	ROM vectors:
(1)   63/       0 : =$FF49              rom_key			=	$ff49		;KERNAK KEY: Set string to Function Key
(1)   64/       0 : =$FF4F              rom_primm		=	$ff4f		;KERNAL PRIMM
(1)   65/       0 : =$FF8A              rom_vectors_setdefault	=	$ff8a		;KERNAL Vectors set to default values	$f2ce
(1)   66/       0 : =$FF93              rom_seclisten		=	$ff93		;KERNAL SECONDARY LISTEN		$ee4d
(1)   67/       0 : =$FF96              rom_sectalk		=	$ff96		;KERNAL SECONDARY TALK (TKSA)		$ee1a
(1)   68/       0 : =$FFA5              rom_busin		=	$ffa5		;KERNAL BUSIN 				$ec8b
(1)   69/       0 : =$FFA8              rom_busout		=	$ffa8		;KERNAL BUSOUT				$ecdf
(1)   70/       0 : =$FFAB              rom_untalk		=	$ffab		;KERNAL UNTALK				$ef3b
(1)   71/       0 : =$FFAE              rom_unlisten		=	$ffae		;KERNAL UNLISTEN			$ef23
(1)   72/       0 : =$FFB1              rom_listen		=	$ffb1		;KERNAL LISTEN				$ee2c
(1)   73/       0 : =$FFB4              rom_talk		=	$ffb4		;KERNAL TALK				$edfa
(1)   74/       0 : =$FFBA              rom_setlfs		=	$ffba		;KERNAL SETLFS				$f413
(1)   75/       0 : =$FFBD              rom_setnam		=	$ffbd		;KERNAL SETNAM				$f40c
(1)   76/       0 : =$FFD2              rom_chrout		=	$ffd2		;KERNAL CHROUT				$ec4b
(1)   77/       0 : =$FFD5              rom_load		=	$ffd5		;KERNAL LOAD				$f043
(1)   78/       0 : =$FFD8              rom_save		=	$ffd8		;KERNAL SAVE				$f194
(1)   79/       0 :                     
(1)   80/       0 :                     ;-----------------------------------------------------------------------------
(1)   81/       0 :                     ;---	HW registers:
(1)   82/       0 : =$FF00              hw_tedbase		=	$ff00		;$FF00..$FF3F: TED base address
(1)   83/       0 : =$FF06              hw_ted_scrcontrol1	=	hw_tedbase+$06	;$FF06: TED screen control register 1
(1)   84/       0 : =$FF13              hw_ted_chargenclk	=	hw_tedbase+$13	;$FF13: TED char.gen address + clock control
(1)   85/       0 : =$FF19              hw_ted_bordercolor	=	hw_tedbase+$19	;$FF19: TED border color
(1)   86/       0 : =$FF1D              hw_ted_ypos		=	hw_tedbase+$1d	;$FF1D: TED actual rasterline no
(1)   87/       0 :                     ;-----------------------------------------------------------------------------
(1)   88/       0 :                     
      27/       0 :                     ;-----------------------------------------------------------------------------
      28/       0 : =$1001              start_addr	=	$1001		;Loader system start address
      29/       0 : =$5C6               switcher_addr	=	$05c6		;On/Off switch routine start address (V0.3+, Funct.key buffer)
      30/       0 : =$5F5               bootstrap_addr	=	$05f5		;Bootstrap start address
      31/       0 : =$801               ldr_addr	=	$0801		;Main loader routine start address
      32/       0 : =$3E00              ldrstore16_addr	=	$3e00		;Main loader routine storage area / 16K RAM
      33/       0 : =$7E00              ldrstore32_addr	=	$7e00		;Main loader routine storage area / 32K RAM
      34/       0 : =$EE00              ldrstore64_addr	=	$ee00		;Main loader routine storage area / 64K RAM
      35/       0 :                     ;-----------------------------------------------------------------------------
      36/       0 :                     
      37/     FFF :                     	ORG	start_addr - 2
      38/     FFF : 01 10               	ADR	start_addr
      39/    1001 :                     
      40/    1001 :                     ;	BASIC area:
      41/    1001 : 0A 10 E1 07         	ADR	+, 2017
      42/    1005 : 9E                  	BYT	$9e		; sys token
      43/    1006 : 34 31 30 39         	BYT	"4109"		; $100d
      44/    100A : 00 00 00            +	BYT	0,0,0
      45/    100D :                     
      46/    100D :                     
      47/    100D :                     
      48/    100D :                     ;	Init routine:
      49/    100D :                     	ORG	$100d
      50/    100D : A5 01               		lda	$01
      51/    100F : 29 08               		and	#%00001000		;Cass. Motor on?
      52/    1011 : D0 23               		bne	.mtroff
      53/    1013 : 20 4F FF            		jsr	rom_primm
      54/    1016 : 0D 50 4C 45 41 53   		BYT	$0d,"PLEASE DISCONNECT DATASETTE!",$0d,0
                    45 20 44 49 53 43 
                    4F 4E 4E 45 43 54 
                    20 44 41 54 41 53 
                    45 54 54 45 21 0D 
                    00                
      55/    1035 : 60                  		rts
      56/    1036 :                     .mtroff
      57/    1036 :                     
      58/    1036 :                     ;	Patch copy routines for 16K/32K/64K, set memory:
      59/    1036 : AD 34 05            		lda	b_memsiz+1			;Basic FREE memory END
      60/    1039 : A2 3E               		ldx	#(ldrstore16_addr / 256)	;16K memory
      61/    103B : C9 40               		cmp	#$40
      62/    103D : 90 08               		bcc	.memsizeset
      63/    103F : A2 7E               		ldx	#(ldrstore32_addr / 256)	;32K memory
      64/    1041 : C9 80               		cmp	#$80
      65/    1043 : 90 02               		bcc	.memsizeset
      66/    1045 : A2 EE               		ldx	#(ldrstore64_addr / 256)	;64K memory
      67/    1047 : 8E 34 05            .memsizeset	stx	b_memsiz+1
      68/    104A : A9 00               		lda	#(ldrstore64_addr & $ff)	;Low Byte is equal in 16K/32K/64K
      69/    104C : 8D 33 05            		sta	b_memsiz+0
      70/    104F : 8E 72 10            		stx	.loadccopy1_wr+2		;Patch the program -> "save" copy routine 1
      71/    1052 : 8E 32 11            		stx	load_routine.loadccopy1-bootstrap_addr+bootstrap_code_start+2
      72/    1055 : E8                  		inx
      73/    1056 : 8E 7F 10            		stx	.loadccopy2_wr+2		;Patch the program -> "save" copy routine 2 
      74/    1059 : 8E 3F 11            		stx	load_routine.loadccopy2-bootstrap_addr+bootstrap_code_start+2
      75/    105C :                     
      76/    105C :                     ;	Copy codes to "storage" area:
      77/    105C : A2 E7               		ldx	#bootstrap_code_length		;Bootstrap copy
      78/    105E : BD EB 10            .bootstrapccopy	lda	bootstrap_code_start-1,x
      79/    1061 : 9D F4 05            		sta	bootstrap_addr-1,x
      80/    1064 : CA                  		dex
      81/    1065 : D0 F7               		bne	.bootstrapccopy
      82/    1067 :                     
      83/    1067 : A9 5A               		lda	#$5a
      84/    1069 : 85 95               		sta	z_bsour				;CkSum init
      85/    106B : A0 00               		ldy	#0
      86/    106D : B9 D3 11            .loadccopy1	lda	loader_code_start,y
      87/    1070 : 99 00 EE            .loadccopy1_wr	sta	ldrstore64_addr,y		;Address patched to 16K/32K/64K
      88/    1073 : 45 95               		eor	z_bsour
      89/    1075 : 85 95               		sta	z_bsour
      90/    1077 : C8                  		iny
      91/    1078 : D0 F3               		bne	.loadccopy1
      92/    107A : B9 D3 12            .loadccopy2	lda	loader_code_start+256,y
      93/    107D : 99 00 EF            .loadccopy2_wr	sta	ldrstore64_addr+256,y		;Address patched to 16K/32K/64K
      94/    1080 : 45 95               		eor	z_bsour
      95/    1082 : 85 95               		sta	z_bsour
      96/    1084 : C8                  		iny
      97/    1085 : C0 EB               		cpy	#loader_code_length & $ff
      98/    1087 : D0 F1               		bne	.loadccopy2
      99/    1089 : 8D 6D 06            		sta	cksum_check+1			;Patch CkSum checker
     100/    108C :                     
     101/    108C :                     ;	Prepare On/Off switch routine (if required):
     102/    108C : =>TRUE                  IF (def_onoffswitch = "Y")
     103/    108C : A9 00               		lda	#0				;"F1" Function Key
     104/    108E : 85 76               		sta	$76
     105/    1090 : A9 08               		lda	#.functionkeystring_end - .functionkeystring
     106/    1092 : A2 C3               		ldx	#(.functionkeystring & $ff)
     107/    1094 : A0 10               		ldy	#(.functionkeystring / 256)
     108/    1096 : 86 22               		stx	$22
     109/    1098 : 84 23               		sty	$23
     110/    109A : 20 49 FF            		jsr	rom_key				;Set string to "F1" key
     111/    109D : A2 20               		ldx	#.switcherroutine_end - .switcherroutine - 1
     112/    109F : BD CB 10            .switchercopy	lda	.switcherroutine,x
     113/    10A2 : 9D C6 05            		sta	switcher_addr,x
     114/    10A5 : CA                  		dex
     115/    10A6 : 10 F7               		bpl	.switchercopy
     116/    10A8 : [102]                   ENDIF
     117/    10A8 :                     
     118/    10A8 :                     ;	Set load vector, reset BASIC interpreter:
     119/    10A8 : A9 F8               		lda	#(load_routine & $ff)
     120/    10AA : 8D 2E 03            		sta	v_iload+0
     121/    10AD : A9 05               		lda	#(load_routine / 256)
     122/    10AF : 8D 2F 03            		sta	v_iload+1
     123/    10B2 : 20 17 81            		jsr	bas_vectors_init		;$8117
     124/    10B5 : 20 2E 80            		jsr	bas_reset			;$802e
     125/    10B8 : A5 2B               		lda	z_txttab+0
     126/    10BA : A4 2C               		ldy	z_txttab+1
     127/    10BC : 20 23 89            		jsr	bas_memory_check		;$8923
     128/    10BF : 58                  		cli
     129/    10C0 : 4C 25 80            		jmp	bas_coldreset_stack		;$8025	Start BASIC Interpreter
     130/    10C3 :                     
     131/    10C3 : =>TRUE                  IF (def_onoffswitch = "Y")
     132/    10C3 :                     .functionkeystring
     133/    10C3 : 53 59 53 31 35 32   	BYT	"SYS1525", $0d
                    35 0D             
     134/    10CB :                     .functionkeystring_end
     135/    10CB :                     
     136/    10CB :                     .switcherroutine
     137/     5C6 :                     	PHASE switcher_addr
     138/     5C6 : A9 44               		lda	#'D'
     139/     5C8 : A2 4A               		ldx	#(rom_orig_load_vect & $ff)
     140/     5CA : A0 F0               		ldy	#(rom_orig_load_vect / 256)
     141/     5CC : 2C 2F 03            		bit	v_iload+1
     142/     5CF : 10 06               		bpl	.switch
     143/     5D1 : A9 45               		lda	#'E'
     144/     5D3 : A2 F8               		ldx	#(load_routine & $ff)
     145/     5D5 : A0 05               		ldy	#(load_routine / 256)
     146/     5D7 : 8D E3 05            .switch		sta	.switchchar
     147/     5DA : 8E 2E 03            		stx	v_iload+0
     148/     5DD : 8C 2F 03            		sty	v_iload+1
     149/     5E0 : 20 4F FF            		jsr	rom_primm
     150/     5E3 : 3F 0D 00            .switchchar	BYT	"?",$0d,0
     151/     5E6 : 60                  		rts
     152/    10EC :                     	DEPHASE
     153/    10EC :                     .switcherroutine_end
     154/    10EC :                     
     155/    10EC : [131]                   ENDIF
     156/    10EC :                     
     157/    10EC :                     ;-----------------------------------------------------------------------------
     158/    10EC :                     ;---	Loader pre/post process routines:
     159/    10EC :                     
     160/    10EC :                     bootstrap_code_start
     161/    10EC :                     
     162/     5F5 :                     	PHASE bootstrap_addr
     163/     5F5 :                     
     164/     5F5 : =>TRUE                  IF (def_onoffswitch = "Y")
     165/     5F5 : 4C C6 05            		jmp	switcher_addr		;On/Off switch 
     166/     5F8 : =>FALSE                 ELSE
     167/     5F8 :                     		rts				;3-PLUS-1 start address: Return, if called
     168/     5F8 : [164]                   ENDIF
     169/     5F8 :                     
     170/     5F8 : 85 93               load_routine	sta	z_verfck		;Store Verify flag
     171/     5FA : A9 00               		lda	#0
     172/     5FC : 85 90               		sta	z_status		;Clear ST
     173/     5FE : A5 AE               		lda	z_fa			;Selected Device no
     174/     600 : C9 08               		cmp	#8
     175/     602 : B0 03               		bcs	.driveaddr
     176/     604 : 4C 50 F0            .origload	jmp	rom_load_cont		;No drive, go to ROM load
     177/     607 :                     
     178/     607 : A5 AB               .driveaddr	lda	z_fnlen			;FileName length
     179/     609 : F0 F9               		beq	.origload		;If 0, go to ROM load
     180/     60B : A5 93               		lda	z_verfck		;Verify flag
     181/     60D : D0 F5               		bne	.origload
     182/     60F :                     
     183/     60F : A0 00               		ldy	#0			;First character
     184/     611 : A9 AF               		lda	#$af			;from FileName
     185/     613 : 8D DF 07            		sta	$07df
     186/     616 : 20 D9 07            		jsr	$07d9
     187/     619 : C9 24               		cmp	#"$"			;Filename is "$"?
     188/     61B : F0 E7               		beq	.origload		;If yes, KERNAL load required, Fastloading DIRECTORY not possible
     189/     61D :                     
     190/     61D : 20 60 F1            		jsr	rom_searchingfor	;Print "SEARCHING FOR..." text
     191/     620 : 20 89 F1            		jsr	rom_loadingverifying	;Print "LOADING" text
     192/     623 : AD 06 FF            		lda	hw_ted_scrcontrol1
     193/     626 : 8D 86 06            		sta	sjl_retted06+1		;Save original TED register value
     194/     629 : 29 EF               		and	#%11101111
     195/     62B : 8D 06 FF            		sta	hw_ted_scrcontrol1	;Screen Off
     196/     62E :                     
     197/     62E : 08                  		php
     198/     62F : 78                  		sei
     199/     630 : 8D 3F FF            		sta	$ff3f
     200/     633 : A9 5A               		lda	#$5a
     201/     635 : 85 95               		sta	z_bsour			;CkSum init
     202/     637 : A0 00               		ldy	#0
     203/     639 : B9 00 EE            .loadccopy1	lda	ldrstore64_addr,y	;Address patched for proper memory size
     204/     63C : 99 01 08            		sta	ldr_addr,y
     205/     63F : 45 95               		eor	z_bsour
     206/     641 : 85 95               		sta	z_bsour
     207/     643 : C8                  		iny
     208/     644 : D0 F3               		bne	.loadccopy1
     209/     646 : B9 00 EF            .loadccopy2	lda	ldrstore64_addr+256,y	;Address patched for proper memory size
     210/     649 : 99 01 09            		sta	ldr_addr+256,y
     211/     64C : 45 95               		eor	z_bsour
     212/     64E : 85 95               		sta	z_bsour
     213/     650 : C8                  		iny
     214/     651 : C0 EB               		cpy	#loader_code_length & $ff
     215/     653 : D0 F1               		bne	.loadccopy2
     216/     655 : 8D 3E FF            		sta	$ff3e
     217/     658 : 28                  		plp
     218/     659 :                     
     219/     659 : AD 13 FF            		lda	hw_ted_chargenclk
     220/     65C : 8D 8B 06            		sta	sjl_retted13+1
     221/     65F : 09 02               		ora	#%00000010
     222/     661 : 8D 13 FF            		sta	hw_ted_chargenclk	;Single Clock select
     223/     664 :                     
     224/     664 : =>TRUE                  IF (def_wimode = 3)
     225/     664 : AD 19 FF            		lda	hw_ted_bordercolor
     226/     667 : 8D BC 08            		sta	loader_routine.bordercolor+1
     227/     66A : =>FALSE                 ELSEIF (def_wimode > 0)
     228/     66A :                     		lda	hw_ted_bordercolor
     229/     66A :                     		sta	sjl_retted19+1
     230/     66A : [224]                   ENDIF
     231/     66A :                     
     232/     66A : A5 95               		lda	z_bsour
     233/     66C : C9 00               cksum_check	cmp	#0			;Self-modifyed: load routine is valid?
     234/     66E : F0 05               		beq	.waitborder
     235/     670 : 20 7F 06            		jsr	sjl_returnrout
     236/     673 : 50 F0               		ADR	rom_load_cont		;KERNAL LOAD
     237/     675 :                     
     238/     675 : AD 1D FF            .waitborder	lda	hw_ted_ypos
     239/     678 : C9 DC               		cmp	#220
     240/     67A : D0 F9               		bne	.waitborder
     241/     67C : 4C 07 08            		jmp	loader_routine
     242/     67F :                     
     243/     67F :                     ;	"RETURN" routine. Restore screen and exit:
     244/     67F : 08                  sjl_returnrout	php
     245/     680 : 48                  		pha
     246/     681 : 8A                  		txa
     247/     682 : 48                  		pha
     248/     683 : 98                  		tya
     249/     684 : 48                  		pha
     250/     685 :                     
     251/     685 : A9 00               sjl_retted06	lda	#0			;Self-modified data: original TED register value
     252/     687 : 8D 06 FF            		sta	hw_ted_scrcontrol1	;Screen restore
     253/     68A : A9 00               sjl_retted13	lda	#0
     254/     68C : 8D 13 FF            		sta	hw_ted_chargenclk	;Clock restore
     255/     68F :                     
     256/     68F : =>TRUE                  IF (def_wimode = 3)
     257/     68F : =>FALSE                 ELSEIF (def_wimode > 0)
     258/     68F :                     sjl_retted19	lda	#0
     259/     68F :                     		sta	hw_ted_bordercolor	;Border color restore
     260/     68F : [256]                   ENDIF
     261/     68F :                     
     262/     68F : A9 0F               		lda	#%00001111
     263/     691 : 85 00               		sta	$00			;Restore CPUPORT DDR
     264/     693 : A5 9D               		lda	z_eal
     265/     695 : 48                  		pha
     266/     696 : A5 9E               		lda	z_eah
     267/     698 : 48                  		pha
     268/     699 : BA                  		tsx
     269/     69A : BD 07 01            		lda	$0107,x
     270/     69D : 85 9D               		sta	z_eal
     271/     69F : BD 08 01            		lda	$0108,x
     272/     6A2 : 85 9E               		sta	z_eah
     273/     6A4 : A0 01               		ldy	#1
     274/     6A6 : B1 9D               		lda	(z_eal),y
     275/     6A8 : 9D 07 01            		sta	$0107,x
     276/     6AB : C8                  		iny
     277/     6AC : B1 9D               		lda	(z_eal),y
     278/     6AE : 9D 08 01            		sta	$0108,x
     279/     6B1 : A2 00               		ldx	#0
     280/     6B3 : AD 00 08            		lda	$0800
     281/     6B6 : 9D 00 08            .colmemrestore	sta	ldr_addr-1,x		;~restore original colour memory
     282/     6B9 : 9D 00 09            		sta	ldr_addr-1+256,x
     283/     6BC : E8                  		inx
     284/     6BD : D0 F7               		bne	.colmemrestore
     285/     6BF : 20 CE 06            sjl_erldingaddr	jsr	.eraseloadtext
     286/     6C2 : 68                  		pla
     287/     6C3 : 85 9E               		sta	z_eah
     288/     6C5 : 68                  		pla
     289/     6C6 : 85 9D               		sta	z_eal
     290/     6C8 : 68                  		pla
     291/     6C9 : A8                  		tay
     292/     6CA : 68                  		pla
     293/     6CB : AA                  		tax
     294/     6CC : 68                  		pla
     295/     6CD : 40                  		rti
     296/     6CE :                     
     297/     6CE : 24 9A               .eraseloadtext	bit	z_msgfgl
     298/     6D0 : 10 09               		bpl	.eraloadnot
     299/     6D2 : 20 4F FF            		jsr	rom_primm
     300/     6D5 : 1B 50 1B 4A 91 00   		BYT	$1b,"P",$1b,"J",$91,0
     301/     6DB : 60                  .eraloadnot	rts
     302/     6DC :                     
     303/    11D3 :                     	DEPHASE
     304/    11D3 :                     
     305/    11D3 : =$E7                bootstrap_code_length = * - bootstrap_code_start
     306/    11D3 :                     
     307/    11D3 :                     ;-----------------------------------------------------------------------------
     308/    11D3 :                     ;---	Loader routine:
     309/    11D3 :                     
     310/    11D3 :                     loader_code_start
     311/    11D3 :                     
     312/     801 :                     	PHASE ldr_addr
     313/     801 :                     
     314/     801 : 20 7F 06            open_exit	jsr	sjl_returnrout
     315/     804 : 06 08               		ADR	.retaddr
     316/     806 : 60                  .retaddr	rts
     317/     807 :                     
     318/     807 : A6 AD               loader_routine	ldx	z_sa			;Get original secondary address from LOAD routine, not IEC SA!
     319/     809 : A9 60               		lda	#$60
     320/     80B : 85 AD               		sta	z_sa			;Set secondary address: $60: load from drive channel 0
     321/     80D :                     
     322/     80D : A9 08               		lda	#((open_exit-1) / 256)
     323/     80F : 48                  		pha
     324/     810 : A9 00               		lda	#((open_exit-1) & $ff)
     325/     812 : 48                  		pha				;"?DEVICE NOT PRESENT ERROR." ~routine
     326/     813 : 20 05 F0            		jsr	rom_iec_open		;BUSOP. If DNP, drop return address and go to error handler
     327/     816 : 68                  		pla
     328/     817 : 68                  		pla
     329/     818 : 78                  		sei
     330/     819 :                     
     331/     819 : A5 01               		lda	$01
     332/     81B : 29 08               		and	#%00001000		;Cass. Motor on?
     333/     81D : F0 1D               		beq	.filenotfound		;If yes, ERROR
     334/     81F : A9 08               		lda	#%00001000
     335/     821 : 85 01               		sta	$01			;Cass. RD line 0
     336/     823 : A9 1F               		lda	#%00011111
     337/     825 : 85 00               		sta	$00			;Dirty Hack: Switch Output to Cass. RD line
     338/     827 :                     
     339/     827 : A5 AE               		lda	z_fa			;Device no
     340/     829 : 20 F9 08            		jsr	sjl_talk		;SJL Talk
     341/     82C : A5 AD               		lda	z_sa			;Secondary address
     342/     82E : 20 7A 09            		jsr	sjl_sectalk		;Secondary Talk
     343/     831 : 20 A6 09            		jsr	sjl_busin		;Get load address Lo BYTE
     344/     834 : 85 9D               		sta	z_eal
     345/     836 : =>FALSE                 IF (def_testing = "Y")
     346/     836 :                     		sta	$e6			;If test, store original LOAD address LO
     347/     836 : [345]                   ENDIF
     348/     836 : A5 90               		lda	z_status
     349/     838 : 4A                  		lsr	a
     350/     839 : 4A                  		lsr	a
     351/     83A : 90 05               		bcc	.filefound
     352/     83C : 20 7F 06            .filenotfound	jsr	sjl_returnrout
     353/     83F : 7C F2               		ADR	rom_error_filenotfnd	;"?FILE NOT FOUND ERROR."
     354/     841 :                     
     355/     841 : 20 A6 09            .filefound	jsr	sjl_busin		;Get load address Hi BYTE
     356/     844 : 85 9E               		sta	z_eah
     357/     846 : =>FALSE                 IF (def_testing = "Y")
     358/     846 :                     		sta	$e7			;If test, store original LOAD address HI
     359/     846 : [357]                   ENDIF
     360/     846 : 20 88 09            		jsr	sjl_untalk
     361/     849 :                     
     362/     849 : 8A                  		txa				;LOAD sec.addr = 0? Original load address / basic load address?
     363/     84A : D0 08               		bne	.origloadaddr
     364/     84C : A5 B4               		lda	z_memuss_l
     365/     84E : 85 9D               		sta	z_eal
     366/     850 : A5 B5               		lda	z_memuss_h
     367/     852 : 85 9E               		sta	z_eah
     368/     854 : A5 9E               .origloadaddr	lda	z_eah
     369/     856 : C9 0A               		cmp	#$0a			;Load address >= $0A00?
     370/     858 : B0 0A               		bcs	.ldaddrokay
     371/     85A : 20 11 F2            		jsr	rom_iec_close		;Close file
     372/     85D : A6 AD               		ldx	z_sa
     373/     85F : 20 7F 06            		jsr	sjl_returnrout
     374/     862 : 70 F0               		ADR	rom_load_driveload	;KERNAL load from disk, original
     375/     864 :                     
     376/     864 : E6 AD               .ldaddrokay	inc	z_sa			;Secondary address $61 = JD load
     377/     866 : A5 AE               		lda	z_fa			;Device no
     378/     868 : 20 F9 08            		jsr	sjl_talk		;SJL Talk
     379/     86B : A5 AD               		lda	z_sa			;Secondary address
     380/     86D : 20 7A 09            		jsr	sjl_sectalk		;Secondary Talk
     381/     870 : C6 AD               		dec	z_sa
     382/     872 :                     
     383/     872 : A0 00               		ldy	#$00			;Mem. write index = always 0
     384/     874 :                     		;ldx	#$00
     385/     874 : A2 E7               		ldx	#231
     386/     876 : CA                  .wait1		dex
     387/     877 : D0 FD               		bne	.wait1
     388/     879 :                     
     389/     879 : A9 08               .loadloop	lda	#%00001000		;IEC lines released
     390/     87B : 85 01               		sta	$01
     391/     87D : 24 01               		bit	$01
     392/     87F : 50 FC               		bvc	*-2			;Wait until 1541 release CLK
     393/     881 : 30 4E               		bmi	.loadendover		;Branch if load ended
     394/     883 : 24 01               		bit	$01
     395/     885 : 10 FC               		bpl	*-2			;Wait until 1541 release DAT
     396/     887 :                     
     397/     887 : EA                  .transferbyte	nop				;	 Timing critical section
     398/     888 : EA                  		nop
     399/     889 : EA                  		nop
     400/     88A : EA                  		nop
     401/     88B : A9 08               		lda	#%00001000		;	 Release ATN/CLK/DAT
     402/     88D : A2 09               		ldx	#%00001001		;	 Drive DAT
     403/     88F : 86 01               		stx	$01			;(15/16)
     404/     891 : 24 01               		bit	$01			;(18/20)
     405/     893 : 50 E4               		bvc	.loadloop		;	 If 1541 activate CLK line, wait next block
     406/     895 : EA                  		nop
     407/     896 : 85 01               		sta	$01			;(25/28) Release DAT
     408/     898 : A5 01               		lda	$01			;(28/32) Read bits 10
     409/     89A : EA                  		nop
     410/     89B : 4A                  		lsr	a
     411/     89C : 4A                  		lsr	a
     412/     89D : 45 01               		eor	$01			;(37/42) Read bits 32
     413/     89F : 24 00               		bit	$00
     414/     8A1 : 4A                  		lsr	a
     415/     8A2 : 4A                  		lsr	a
     416/     8A3 : 45 01               		eor	$01			;(47/53) Read bits 54
     417/     8A5 : 24 00               		bit	$00
     418/     8A7 : 4A                  		lsr
     419/     8A8 : 4A                  		lsr
     420/     8A9 : 45 01               		eor	$01			;(57/64) Read bits 76
     421/     8AB : 49 0A               		eor	#%00001010		;	 Flip back (cas. mtr) bits
     422/     8AD : 91 9D               .memwrt_opcode	sta	(z_eal),y		;	 Store received BYTE
     423/     8AF : E6 9D               		inc	z_eal
     424/     8B1 : D0 D4               		bne	.transferbyte
     425/     8B3 :                     
     426/     8B3 : =>FALSE                 IF (def_wimode = 1)
     427/     8B3 :                     		and	#%00001111
     428/     8B3 :                     		ora	#%00010000
     429/     8B3 :                     		eor	hw_ted_bordercolor
     430/     8B3 :                     		sta	hw_ted_bordercolor	;Border color change: "working indicator"
     431/     8B3 : [426]                   ENDIF
     432/     8B3 : =>FALSE                 IF (def_wimode = 2)
     433/     8B3 :                     		and	#%00001111
     434/     8B3 :                     		sta	hw_ted_bordercolor	;Border color change: "working indicator"
     435/     8B3 :                     		bne	.notblack
     436/     8B3 :                     		inc	hw_ted_bordercolor	;Border color: change black to gray
     437/     8B3 :                     .notblack
     438/     8B3 : [432]                   ENDIF
     439/     8B3 : =>TRUE                  IF (def_wimode = 3)
     440/     8B3 : 8D 19 FF            		sta	hw_ted_bordercolor	;Border color change: "working indicator"
     441/     8B6 : 49 7F               		eor	#$7f
     442/     8B8 : 8D 19 FF            		sta	hw_ted_bordercolor
     443/     8BB : A9 00               .bordercolor	lda	#$00			;Self-modified: Saved Border color
     444/     8BD : 8D 19 FF            		sta	hw_ted_bordercolor	;Border color restore
     445/     8C0 : [439]                   ENDIF
     446/     8C0 :                     
     447/     8C0 : E6 9E               		inc	z_eah
     448/     8C2 : A5 9E               		lda	z_eah
     449/     8C4 : F0 04               		beq	.memwrtdis		;If next address = $0000, error, disable memwrite
     450/     8C6 : C9 FD               		cmp	#$fd
     451/     8C8 : D0 BD               		bne	.transferbyte		;If next address < $FD00, okay
     452/     8CA : A9 B1               .memwrtdis	lda	#$b1			;LDA ($ZP),y op.code
     453/     8CC : 8D AD 08            		sta	.memwrt_opcode
     454/     8CF : D0 B6               		bne	.transferbyte		;BRA read cycle
     455/     8D1 :                     
     456/     8D1 : A2 64               .loadendover	ldx	#$64
     457/     8D3 : 24 01               .end_check	bit	$01
     458/     8D5 : 50 06               		bvc	.end_ok
     459/     8D7 : CA                  		dex
     460/     8D8 : D0 F9               		bne	.end_check
     461/     8DA : A9 42               		lda	#%01000010		;EOI, TimeOut under receiving
     462/     8DC : 2C                  		BYT	$2c			;~NOP $xxxx
     463/     8DD : A9 40               .end_ok		lda	#%01000000		;EOI
     464/     8DF : 20 1E F4            		jsr	rom_set_status
     465/     8E2 : 20 88 09            		jsr	sjl_untalk
     466/     8E5 : 20 11 F2            		jsr	rom_iec_close		;IEC bus CLOSE
     467/     8E8 : 90 05               		bcc	.end_ready
     468/     8EA : 20 7F 06            		jsr	sjl_returnrout
     469/     8ED : 7C F2               		ADR	rom_error_filenotfnd
     470/     8EF : A9 2C               .end_ready	lda	#$2c			;BIT $xxxx op.code
     471/     8F1 : 8D BF 06            		sta	sjl_erldingaddr		;Patch "LOADING" text eraser routine
     472/     8F4 : 20 7F 06            		jsr	sjl_returnrout
     473/     8F7 : EB F0               		ADR	rom_load_readyret
     474/     8F9 :                     
     475/     8F9 :                     
     476/     8F9 :                     
     477/     8F9 :                     ;	TALK routine:
     478/     8F9 : 09 40               sjl_talk	ora	#$40			;TALK flag
     479/     8FB : 85 95               sjl_sendbyatn	sta	z_bsour
     480/     8FD : 20 C6 E2            		jsr	rom_cbmser_dat_hiz	;DAT line to HiZ
     481/     900 : EA                  		nop
     482/     901 : EA                  		nop
     483/     902 : A5 01               		lda	$01
     484/     904 : 09 04               		ora	#%00000100
     485/     906 : 85 01               		sta	$01			;ATN line to Lo
     486/     908 :                     
     487/     908 :                     ;	Send IEC BYTE: (lwiecs)
     488/     908 : 20 BF E2            sjl_sendbyte	jsr	rom_cbmser_clk_lo	;CLK line to Lo
     489/     90B : 20 C6 E2            		jsr	rom_cbmser_dat_hiz	;DAT line to HiZ
     490/     90E : 20 DC E2            		jsr	rom_cbmser_wait1ms	;Wait 1 mSec
     491/     911 : 20 D4 E2            		jsr	rom_cbmser_readlines	;Read CBMSER lines: Data -> Cy, Clock: -> N
     492/     914 : 90 03               		bcc	.devpres
     493/     916 : 4C E9 E1            		jmp	rom_cbmser_devnotpres	;Set "Device Not Present" flag
     494/     919 : 20 B8 E2            .devpres	jsr	rom_cbmser_clk_hiz	;CLK line to HiZ
     495/     91C : 20 D4 E2            .waitdata	jsr	rom_cbmser_readlines	;Read CBMSER lines: Data -> Cy, Clock: -> N
     496/     91F : 90 FB               		bcc	.waitdata		;Wait until data HiZ
     497/     921 : 20 BF E2            		jsr	rom_cbmser_clk_lo	;CLK line to Lo
     498/     924 : 8A                  		txa
     499/     925 : 48                  		pha
     500/     926 : A2 08               		ldx	#8			;8 bits to send
     501/     928 : EA                  .lsendbits	nop
     502/     929 : EA                  		nop
     503/     92A : EA                  		nop
     504/     92B : 24 01               		bit	$01
     505/     92D : 30 05               		bmi	.devprescont
     506/     92F : 68                  		pla
     507/     930 : AA                  		tax
     508/     931 : 4C EE E1            		jmp	rom_cbmser_timeout	;Set "TimeOut" flag
     509/     934 : 20 C6 E2            .devprescont	jsr	rom_cbmser_dat_hiz	;DAT line to HiZ
     510/     937 : 66 95               		ror	z_bsour
     511/     939 : B0 03               		bcs	.dathi
     512/     93B : 20 CD E2            		jsr	rom_cbmser_dat_lo	;DAT line to Lo
     513/     93E : 20 B8 E2            .dathi		jsr	rom_cbmser_clk_hiz	;CLK line to HiZ
     514/     941 : A5 01               		lda	$01
     515/     943 : 29 FE               		and	#%11111110		;C64: $DF = %11011111	DAT = HiZ
     516/     945 : 09 02               		ora	#%00000010		;C64: $10 = %00010000	CLK = Lo
     517/     947 : 85 01               		sta	$01
     518/     949 : 29 04               		and	#%00000100		;C64: $08 = %00001000	ATN drive?
     519/     94B : F0 19               		beq	.ltwobitsent
     520/     94D : A5 95               		lda	z_bsour
     521/     94F : 6A                  		ror	a
     522/     950 : 6A                  		ror	a
     523/     951 : E0 02               		cpx	#2
     524/     953 : D0 11               		bne	.ltwobitsent
     525/     955 : A2 1E               		ldx	#$1e
     526/     957 : 24 01               .lwack1		bit	$01
     527/     959 : 10 05               		bpl	.lwack2
     528/     95B : CA                  		dex
     529/     95C : D0 F9               		bne	.lwack1
     530/     95E : F0 04               		beq	.lcont6
     531/     960 :                     
     532/     960 : 24 01               .lwack2		bit	$01
     533/     962 : 10 FC               		bpl	.lwack2
     534/     964 :                     
     535/     964 : A2 02               .lcont6		ldx	#2
     536/     966 : CA                  .ltwobitsent	dex
     537/     967 : D0 BF               		bne	.lsendbits
     538/     969 : A2 56               		ldx	#$56
     539/     96B : CA                  .lcont7		dex
     540/     96C : F0 07               		beq	.ltbtimeout
     541/     96E : A5 01               		lda	$01
     542/     970 : 30 F9               		bmi	.lcont7
     543/     972 : 68                  		pla
     544/     973 : AA                  		tax
     545/     974 : 60                  		rts
     546/     975 :                     
     547/     975 : 68                  .ltbtimeout	pla
     548/     976 : AA                  		tax
     549/     977 : 4C EE E1            		jmp	rom_cbmser_timeout	;Set "TimeOut" flag
     550/     97A :                     
     551/     97A :                     ;	Send Secondary address: (lsendsa)
     552/     97A : 85 95               sjl_sectalk	sta	z_bsour
     553/     97C : 20 08 09            		jsr	sjl_sendbyte		;Send BYTE
     554/     97F : A9 09               		lda	#%00001001		;C64: $23 = %00100011	Data Lo, ATN / CLK HiZ
     555/     981 : 85 01               		sta	$01
     556/     983 : 24 01               .waitclk	bit	$01
     557/     985 : 70 FC               		bvs	.waitclk
     558/     987 : 60                  		rts
     559/     988 :                     
     560/     988 :                     ;	UnTalk:
     561/     988 : A5 01               sjl_untalk	lda	$01
     562/     98A : 09 04               		ora	#%00000100		;ATN drive
     563/     98C : 85 01               		sta	$01
     564/     98E : 20 BF E2            		jsr	rom_cbmser_clk_lo
     565/     991 : A9 5F               		lda	#$5f			;UNTALK command
     566/     993 : 20 FB 08            		jsr	sjl_sendbyatn		;Send byte with ATN
     567/     996 : 20 FC E1            		jsr	rom_cbmser_atn_hiz	;Release ATN line
     568/     999 : 8A                  		txa
     569/     99A : A2 0A               		ldx	#$0a
     570/     99C : CA                  .ll2		dex
     571/     99D : D0 FD               		bne	.ll2
     572/     99F : AA                  		tax
     573/     9A0 : 20 B8 E2            		jsr	rom_cbmser_clk_hiz	;Release CLK line
     574/     9A3 : 4C C6 E2            		jmp	rom_cbmser_dat_hiz	;Release DAT line
     575/     9A6 :                     
     576/     9A6 :                     ;	IECIN: (lgiecin)
     577/     9A6 : A5 01               sjl_busin	lda	$01
     578/     9A8 : C9 40               		cmp	#%01000000		;#$40
     579/     9AA : 90 FA               		bcc	sjl_busin
     580/     9AC : EA                  		nop
     581/     9AD : EA                  		nop
     582/     9AE : EA                  		nop
     583/     9AF : EA                  		nop
     584/     9B0 : EA                  		nop
     585/     9B1 : EA                  		nop
     586/     9B2 : EA                  		nop
     587/     9B3 : EA                  		nop
     588/     9B4 : A9 08               		lda	#%00001000		;ATN/CLK/DAT HiZ
     589/     9B6 : EA                  		nop
     590/     9B7 : EA                  		nop
     591/     9B8 : 85 01               		sta	$01		;(0)
     592/     9BA : EA                  		nop
     593/     9BB :                     		;nop
     594/     9BB :                     		;nop
     595/     9BB : A5 00               		lda	$00
     596/     9BD : EA                  		nop
     597/     9BE : EA                  		nop
     598/     9BF : EA                  		nop
     599/     9C0 : A5 01               		lda	$01		;(15/16)
     600/     9C2 : 4A                  		lsr
     601/     9C3 : 4A                  		lsr
     602/     9C4 : EA                  		nop
     603/     9C5 : 05 01               		ora	$01		;(24/26)
     604/     9C7 : 4A                  		lsr
     605/     9C8 : 4A                  		lsr
     606/     9C9 : EA                  		nop
     607/     9CA : 45 01               		eor	$01		;(33/36)
     608/     9CC : 4A                  		lsr
     609/     9CD : 4A                  		lsr
     610/     9CE : 49 0A               		eor	#%00001010
     611/     9D0 : EA                  		nop
     612/     9D1 : 45 01               		eor	$01		;(44/48)
     613/     9D3 : 48                  		pha
     614/     9D4 : A9 09               		lda	#%00001001
     615/     9D6 : 24 01               		bit	$01
     616/     9D8 : 85 01               		sta	$01
     617/     9DA : 50 0D               		bvc	.lend1
     618/     9DC : 10 06               		bpl	.lerr1
     619/     9DE : 68                  		pla
     620/     9DF : A9 42               		lda	#%01000010		;EOI + timeout
     621/     9E1 : 4C F0 E1            		jmp	rom_cbmser_sstatserend	;Set STATUS + serial transfer end
     622/     9E4 : A9 40               .lerr1		lda	#%01000000		;EOI
     623/     9E6 : 20 1E F4            		jsr	rom_set_status		;Set Status
     624/     9E9 : 68                  .lend1		pla
     625/     9EA : 18                  		clc
     626/     9EB : 60                  		rts
     627/     9EC :                     
     628/    13BE :                     	DEPHASE
     629/    13BE :                     
     630/    13BE : =$1EB               loader_code_length = * - loader_code_start
     631/    13BE :                     
     632/    13BE :                     ;-----------------------------------------------------------------------------
     633/    13BE :                     
 AS V1.42 Beta [Bld 149] - Source File sjl264.asm - Page 2 - 22.09.2019 15:55:32


  Symbol Table (* = unused):
  --------------------------

*ARCHITECTURE :                                        x86_64-unknown-linux - |
 BAS_COLDRESET_STACK :         8025 - | *BAS_COLD_RESET :              8000 - |
 BAS_MEMORY_CHECK :            8923 - | *BAS_PRINTFREE :               80E5 - |
*BAS_PRINTHEADER :             80C2 - |  BAS_RESET :                   802E - |
 BAS_VECTORS_INIT :            8117 - | *BAS_WARM_RESET :              8003 - |
*BIGENDIAN :                      0 - |  BOOTSTRAP_ADDR :               5F5 - |
 BOOTSTRAP_CODE_LENGTH :         E7 - |  BOOTSTRAP_CODE_START :        10EC C |
*BRANCHEXT :                      0 - |  B_MEMSIZ :                     533 - |
*B_MEMSTR :                     531 - | *CASESENSITIVE :                  0 - |
 CKSUM_CHECK :                  66C C |  CKSUM_CHECK.WAITBORDER :       675 C |
*CONSTPI :        3.141592653589793 - | *DATE :                  22.09.2019 - |
*DEF_BETATEXT :                     - |  DEF_ONOFFSWITCH :                Y - |
 DEF_TESTING :                    N - | *DEF_VERSION :                  0.3 - |
 DEF_WIMODE :                     3 - | *FALSE :                          0 - |
*FULLPMMU :                       1 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - |  HW_TEDBASE :                  FF00 - |
 HW_TED_BORDERCOLOR :          FF19 - |  HW_TED_CHARGENCLK :           FF13 - |
 HW_TED_SCRCONTROL1 :          FF06 - |  HW_TED_YPOS :                 FF1D - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - |  LDRSTORE16_ADDR :             3E00 - |
 LDRSTORE32_ADDR :             7E00 - |  LDRSTORE64_ADDR :             EE00 - |
 LDR_ADDR :                     801 - | *LISTON :                         1 - |
 LOADER_CODE_LENGTH :           1EB - |  LOADER_CODE_START :           11D3 C |
 LOADER_ROUTINE :               807 C |  LOADER_ROUTINE.BORDERCOLOR :   8BB C |
 LOADER_ROUTINE.END_CHECK :     8D3 C |  LOADER_ROUTINE.END_OK :        8DD C |
 LOADER_ROUTINE.END_READY :     8EF C |  LOADER_ROUTINE.FILEFOUND :     841 C |
 LOADER_ROUTINE.FILENOTFOUND :  83C C |  LOADER_ROUTINE.LDADDROKAY :    864 C |
 LOADER_ROUTINE.LOADENDOVER :   8D1 C |  LOADER_ROUTINE.LOADLOOP :      879 C |
 LOADER_ROUTINE.MEMWRTDIS :     8CA C |  LOADER_ROUTINE.MEMWRT_OPCODE : 8AD C |
 LOADER_ROUTINE.ORIGLOADADDR :  854 C |  LOADER_ROUTINE.TRANSFERBYTE :  887 C |
 LOADER_ROUTINE.WAIT1 :         876 C |  LOAD_ROUTINE :                 5F8 C |
 LOAD_ROUTINE.DRIVEADDR :       607 C |  LOAD_ROUTINE.LOADCCOPY1 :      639 C |
 LOAD_ROUTINE.LOADCCOPY2 :      646 C |  LOAD_ROUTINE.ORIGLOAD :        604 C |
*MACEXP :                         7 - | *MOMCPU :                      6502 - |
*MOMCPUNAME :                  6502 - | *NESTMAX :                      100 - |
 OPEN_EXIT :                    801 C |  OPEN_EXIT.RETADDR :            806 C |
*PACKING :                        0 - | *PADDING :                        1 - |
*RELAXED :                        0 - | *ROM_BUSIN :                   FFA5 - |
*ROM_BUSOUT :                  FFA8 - |  ROM_CBMSER_ATN_HIZ :          E1FC - |
 ROM_CBMSER_CLK_HIZ :          E2B8 - |  ROM_CBMSER_CLK_LO :           E2BF - |
 ROM_CBMSER_DAT_HIZ :          E2C6 - |  ROM_CBMSER_DAT_LO :           E2CD - |
 ROM_CBMSER_DEVNOTPRES :       E1E9 - |  ROM_CBMSER_READLINES :        E2D4 - |
 ROM_CBMSER_SSTATSEREND :      E1F0 - |  ROM_CBMSER_TIMEOUT :          E1EE - |
 ROM_CBMSER_WAIT1MS :          E2DC - | *ROM_CBMSER_WAIT20MS :         E2FC - |
*ROM_CHROUT :                  FFD2 - |  ROM_ERROR_FILENOTFND :        F27C - |
 ROM_IEC_CLOSE :               F211 - |  ROM_IEC_OPEN :                F005 - |
 ROM_KEY :                     FF49 - | *ROM_LISTEN :                  FFB1 - |
*ROM_LOAD :                    FFD5 - |  ROM_LOADINGVERIFYING :        F189 - |
 ROM_LOAD_CONT :               F050 - |  ROM_LOAD_DRIVELOAD :          F070 - |
 ROM_LOAD_READYRET :           F0EB - |  ROM_ORIG_LOAD_VECT :          F04A - |
 ROM_PRIMM :                   FF4F - | *ROM_SAVE :                    FFD8 - |
 ROM_SEARCHINGFOR :            F160 - | *ROM_SECLISTEN :               FF93 - |
*ROM_SECTALK :                 FF96 - | *ROM_SETLFS :                  FFBA - |
*ROM_SETNAM :                  FFBD - |  ROM_SET_STATUS :              F41E - |
*ROM_TALK :                    FFB4 - | *ROM_UNLISTEN :                FFAE - |
*ROM_UNTALK :                  FFAB - | *ROM_VECTORS_SETDEFAULT :      FF8A - |
 SJL_BUSIN :                    9A6 C |  SJL_BUSIN.LEND1 :              9E9 C |
 SJL_BUSIN.LERR1 :              9E4 C |  SJL_ERLDINGADDR :              6BF C |
 SJL_ERLDINGADDR.ERALOADNOT :   6DB C |
 SJL_ERLDINGADDR.ERASELOADTEXT :                                        6CE C |
 SJL_RETTED06 :                 685 C |  SJL_RETTED13 :                 68A C |
 SJL_RETTED13.COLMEMRESTORE :   6B6 C |  SJL_RETURNROUT :               67F C |
 SJL_SECTALK :                  97A C |  SJL_SECTALK.WAITCLK :          983 C |
 SJL_SENDBYATN :                8FB C |  SJL_SENDBYTE :                 908 C |
 SJL_SENDBYTE.DATHI :           93E C |  SJL_SENDBYTE.DEVPRES :         919 C |
 SJL_SENDBYTE.DEVPRESCONT :     934 C |  SJL_SENDBYTE.LCONT6 :          964 C |
 SJL_SENDBYTE.LCONT7 :          96B C |  SJL_SENDBYTE.LSENDBITS :       928 C |
 SJL_SENDBYTE.LTBTIMEOUT :      975 C |  SJL_SENDBYTE.LTWOBITSENT :     966 C |
 SJL_SENDBYTE.LWACK1 :          957 C |  SJL_SENDBYTE.LWACK2 :          960 C |
 SJL_SENDBYTE.WAITDATA :        91C C |  SJL_TALK :                     8F9 C |
 SJL_UNTALK :                   988 C |  SJL_UNTALK.LL2 :               99C C |
 START_ADDR :                  1001 - |  SWITCHER_ADDR :                5C6 - |
*TIME :                    15:55:32 - | *TRUE :                           1 - |
*VERSION :                     142F - |  V_ILOAD :                      32E - |
 Z_BSOUR :                       95 - |  Z_EAH :                         9E - |
 Z_EAL :                         9D - |  Z_FA :                          AE - |
*Z_FNADR :                       AF - |  Z_FNLEN :                       AB - |
 Z_MEMUSS_H :                    B5 - |  Z_MEMUSS_L :                    B4 - |
 Z_MSGFGL :                      9A - |  Z_SA :                          AD - |
*Z_SFDX :                        C6 - |  Z_STATUS :                      90 - |
 Z_TXTTAB :                      2B - |  Z_VERFCK :                      93 - |
 __FORW0 :                     100A C |  __FORW0.BOOTSTRAPCCOPY :      105E C |
 __FORW0.FUNCTIONKEYSTRING :   10C3 C |
 __FORW0.FUNCTIONKEYSTRING_END :                                       10CB C |
 __FORW0.LOADCCOPY1 :          106D C |  __FORW0.LOADCCOPY1_WR :       1070 C |
 __FORW0.LOADCCOPY2 :          107A C |  __FORW0.LOADCCOPY2_WR :       107D C |
 __FORW0.MEMSIZESET :          1047 C |  __FORW0.MTROFF :              1036 C |
 __FORW0.SWITCH :               5D7 C |  __FORW0.SWITCHCHAR :           5E3 C |
 __FORW0.SWITCHERCOPY :        109F C |  __FORW0.SWITCHERROUTINE :     10CB C |
 __FORW0.SWITCHERROUTINE_END : 10EC C |

    178 Symbols
     52 unused symbols

 AS V1.42 Beta [Bld 149] - Source File sjl264.asm - Page 3 - 22.09.2019 15:55:32


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page
 AS V1.42 Beta [Bld 149] - Source File sjl264.asm - Page 4 - 22.09.2019 15:55:32


  Space Used in CODE :
  --------------------

FFF-13BD           


0.02 seconds assembly time

    721 lines source file
      2 passes
      0 errors
      0 warnings
